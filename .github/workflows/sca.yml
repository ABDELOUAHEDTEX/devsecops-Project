name: SCA Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sca-scan:
    name: Software Composition Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run pip-audit
      continue-on-error: true
      run: |
        echo "üîç Running pip-audit..."
        pip install pip-audit
        pip-audit --format=json --output=reports/pip-audit-report.json || true
        echo "‚úÖ pip-audit scan completed"
    
    - name: Run Safety
      continue-on-error: true
      run: |
        echo "üîç Running Safety..."
        pip install safety
        safety check --json --output=reports/safety-report.json || true
        echo "‚úÖ Safety scan completed"
    
    # Optional: Add Snyk (requires SNYK_TOKEN secret)
    - name: Run Snyk (Optional)
      if: ${{ secrets.SNYK_TOKEN != '' }}
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        echo "üîç Running Snyk..."
        npm install -g snyk
        snyk auth $SNYK_TOKEN
        snyk test --json --json-file-output=reports/snyk-report.json || true
        echo "‚úÖ Snyk scan completed"
    
    # ============================================
    # Unified Report Processing
    # ============================================
    
    - name: Parse All Security Reports
      if: always()
      run: |
        echo "üìä Parsing all security reports..."
        python scripts/parse_reports.py --verbose
    
    - name: Generate Security Summary
      if: always()
      run: |
        echo "üìà Generating security summary..."
        python scripts/generate_security_summary.py
    
    - name: Generate Security Policies with LLM
      if: always()
      continue-on-error: true
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        echo "ü§ñ Generating security policies..."
        if [ -n "$OPENAI_API_KEY" ] || [ -n "$HF_TOKEN" ]; then
          cd LLM/Scripts
          python generate_policies.py
          echo "‚úÖ Policies generated successfully"
        else
          echo "‚ö†Ô∏è  Policy generation skipped (no API keys configured)"
          echo "üí° Add OPENAI_API_KEY or HF_TOKEN secrets to enable this feature"
        fi
    
    - name: Display Summary in Job Output
      if: always()
      run: |
        echo ""
        echo "üìã ============================================"
        echo "üìã SECURITY SCAN SUMMARY"
        echo "üìã ============================================"
        echo ""
        if [ -f reports/security-summary.txt ]; then
          cat reports/security-summary.txt
        else
          echo "‚ùå No summary generated"
        fi
    
    - name: Upload Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sca-reports
        path: |
          reports/*.json
          reports/*.txt
          LLM/reports/*.yaml
          LLM/reports/*.json
        retention-days: 30
    