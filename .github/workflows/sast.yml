name: SAST Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Run Bandit
      continue-on-error: true
      run: |
        echo "üîç Running Bandit..."
        pip install bandit
        bandit -r . -f json -o reports/bandit-report.json || true
        echo "‚úÖ Bandit scan completed"
    
    - name: Run Semgrep (SARIF format)
      continue-on-error: true
      run: |
        echo "üîç Running Semgrep..."
        pip install semgrep
        # Generate SARIF format for GitHub Security
        semgrep --config=auto --sarif --output=reports/semgrep-report.sarif . || true
        echo "‚úÖ Semgrep SARIF scan completed"
    
    - name: Run Semgrep (JSON format for parsing)
      continue-on-error: true
      run: |
        echo "üîç Running Semgrep (JSON format)..."
        semgrep --config=auto --json --output=reports/semgrep-report.json . || true
        echo "‚úÖ Semgrep JSON scan completed"
    
    # Optional: SonarQube scan (requires SONAR_TOKEN)
    - name: SonarQube Scan (Optional)
      if: ${{ secrets.SONAR_TOKEN != '' }}
      continue-on-error: true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
      run: |
        echo "üîç Running SonarQube..."
        # Install SonarScanner
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH="$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin"
        
        # Run scan
        sonar-scanner \
          -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
          -Dsonar.organization=${{ github.repository_owner }} \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN || true
        
        echo "‚úÖ SonarQube scan completed"
    
    # ============================================
    # Unified Report Processing
    # ============================================
    
    - name: Parse All Security Reports
      if: always()
      run: |
        echo "üìä Parsing all security reports..."
        python scripts/parse_reports.py --verbose
    
    - name: Generate Security Summary
      if: always()
      run: |
        echo "üìà Generating security summary..."
        python scripts/generate_security_summary.py
    
    - name: Generate Security Policies with LLM
      if: always()
      continue-on-error: true
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        echo "ü§ñ Generating security policies..."
        if [ -n "$OPENAI_API_KEY" ] || [ -n "$HF_TOKEN" ]; then
          cd LLM/Scripts
          python generate_policies.py
          echo "‚úÖ Policies generated successfully"
        else
          echo "‚ö†Ô∏è  Policy generation skipped (no API keys configured)"
          echo "üí° Add OPENAI_API_KEY or HF_TOKEN secrets to enable this feature"
        fi
    
    - name: Display Summary in Job Output
      if: always()
      run: |
        echo ""
        echo "üìã ============================================"
        echo "üìã SECURITY SCAN SUMMARY"
        echo "üìã ============================================"
        echo ""
        if [ -f reports/security-summary.txt ]; then
          cat reports/security-summary.txt
        else
          echo "‚ùå No summary generated"
        fi
    
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: reports/semgrep-report.sarif
        category: semgrep
    
    - name: Upload Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-reports
        path: |
          reports/*.json
          reports/*.txt
          reports/*.sarif
          LLM/reports/*.yaml
          LLM/reports/*.json
        retention-days: 30
    
